!pip install tbats

import pandas as pd
import numpy as np
from datetime import datetime
from statsmodels.tsa.seasonal import seasonal_decompose
from statsmodels.graphics.tsaplots import month_plot, quarter_plot
from tbats import TBATS


data = pd.read_excel('Inclusoes.xlsx', index_col = "Data", parse_dates = ['Data'])

data.head()

data = data.rename(columns = {'Quantidade': 'y'})

data.tail(5)

data.index

dataset = data.asfreq('M', method='pad')
dataset["y"].plot(legend = True)

decomposition = seasonal_decompose(x = dataset.y, model='multiplicative')
decomposition.plot();

month_plot(dataset.y.resample(rule = 'MS').mean());
quarter_plot(dataset.y.resample(rule = 'Q').mean());

training_set = data.iloc[:-1]
training_set.tail()

test_set = pd.DataFrame({'Data': [data.index[-1]], 'y': data.iloc[-1]})
test_set['Data'] = pd.to_datetime(test_set['Data'])
test_set = test_set.set_index('Data')
test_set.head()

training_set = pd.DataFrame(training_set)
training_set.head()

model = TBATS(use_trend = True)
model = model.fit(training_set['y'])

predictions_tbats = pd.Series(model.forecast(steps = len(test_set)))
predictions_tbats.index = test_set.index
predictions_tbats

from sklearn.metrics import mean_squared_error, mean_absolute_error
round(mean_absolute_error(test_set['y'], predictions_tbats), 2)

round(np.sqrt(mean_squared_error(test_set['y'], predictions_tbats)),2)

def MAPE(y_true, y_pred):
    y_true, y_pred = np.array(y_true), np.array(y_pred)
    return np.mean(np.abs((y_true - y_pred)/y_true)) * 100

MAPE(test_set['y'], predictions_tbats)
